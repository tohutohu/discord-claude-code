name: CI

on:
  push:
    branches: [ main, develop, 'pr-*' ]
  pull_request:
    branches: [ main ]

env:
  DENO_VERSION: 2.x

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.json', 'deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Format check
        run: deno fmt --check

      - name: Lint
        run: deno lint

      - name: Type check
        run: deno task check

      - name: Run tests with coverage
        run: |
          deno task cov --lcov > coverage.lcov
          deno coverage coverage --lcov > coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.lcov
          flags: unittests
          name: codecov-${{ matrix.os }}
          fail_ci_if_error: true
          verbose: true

      - name: Check coverage threshold
        run: |
          COVERAGE=$(deno coverage coverage --quiet | grep -E "All files" | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below the required 90% threshold"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets the required threshold"
          fi

  build:
    name: Build executable
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Compile executable
        run: |
          deno compile --allow-all --output=discord-claude-code cli.ts
          ./discord-claude-code version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: discord-claude-code-linux
          path: discord-claude-code

  security:
    name: Security audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Run security audit
        run: |
          # Deno doesn't have built-in security audit yet,
          # but we can check for known vulnerable patterns
          echo "🔍 Checking for security issues..."
          
          # Check for hardcoded secrets
          if grep -r -E "(api_key|password|secret|token)\s*=\s*[\"'][^\"']+[\"']" --include="*.ts" --include="*.js" .; then
            echo "❌ Found potential hardcoded secrets"
            exit 1
          fi
          
          echo "✅ No security issues found"

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Build release binaries
        run: |
          # Linux
          deno compile --allow-all --target x86_64-unknown-linux-gnu --output=discord-claude-code-linux cli.ts
          # macOS
          deno compile --allow-all --target x86_64-apple-darwin --output=discord-claude-code-macos cli.ts
          # Windows
          deno compile --allow-all --target x86_64-pc-windows-msvc --output=discord-claude-code-windows.exe cli.ts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            discord-claude-code-linux
            discord-claude-code-macos
            discord-claude-code-windows.exe
          generate_release_notes: true
          draft: false
          prerelease: false